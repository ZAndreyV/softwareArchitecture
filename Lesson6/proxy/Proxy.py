"""Паттерн "Прокси" (Proxy) позволяет создавать объект-заместитель,
 который контролирует доступ к другому объекту.
Вот пример реализации паттерна Прокси на языке программирования Python:"""
# Общий интерфейс для оригинального и прокси объекта
class Subject:
    def request(self):
        pass

# Оригинальный объект
class RealSubject(Subject):
    def request(self):
        print("Выполняется оригинальный запрос")

# Прокси объект
class Proxy(Subject):
    def __init__(self, real_subject):
        self.real_subject = real_subject

    def request(self):
        if self.check_access():
            self.real_subject.request()
            self.log_request()

    def check_access(self):
        # Проверка на доступ
        print("Проверка доступа...")
        return True

    def log_request(self):
        # Журналирование запроса
        print("Журналирование запроса")

# Пример использования
real_subject = RealSubject()  # создание оригинального объекта
proxy = Proxy(real_subject)  # создание прокси объекта, передавая оригинальный объект

proxy.request()

"""
В этом примере класс Subject представляет общий интерфейс для оригинального объекта RealSubject
и прокси объекта Proxy. Прокси контролирует доступ к оригинальному объекту, выполняя проверку доступа
перед выполнением запроса и журналирование запроса.
При запуске примера вывод будет следующим:

Проверка доступа...
Выполняется оригинальный запрос
Журналирование запроса

Таким образом, прокси объект предоставляет инкапсуляцию и управление доступом
к оригинальному объекту, без изменения его интерфейса.
"""